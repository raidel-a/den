package config

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/pelletier/go-toml/v2"
)

type UserPreferences struct {
	DefaultEditor      string   `toml:"defaultEditor"`
	EditorList         []string `toml:"editorList"`
	DefaultFileManager string   `toml:"defaultFileManager"`
	ShowHiddenFiles    bool     `toml:"showHiddenFiles"`
	ShowGitStatus      bool     `toml:"showGitStatus"`
	Theme              string   `toml:"theme"`
	ProjectListTitle   string   `toml:"projectListTitle"`
}

type Config struct {
	ProjectDirs []string        `toml:"projectDirs"`
	Favorites   []string        `toml:"favorites"`
	Preferences UserPreferences `toml:"preferences"`
}

func DefaultConfig() *Config {
	return &Config{
		ProjectDirs: []string{},
		Preferences: UserPreferences{
			DefaultEditor:      "code", // VS Code as default
			EditorList:         []string{"code", "vim", "nano"},
			DefaultFileManager: "", // Will be set based on OS
			ShowHiddenFiles:    false,
			ShowGitStatus:      true,
			Theme:              "default",
			ProjectListTitle:   "Projects",
		},
	}
}

func ensureConfigDir() error {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return fmt.Errorf("could not get home directory: %v", err)
	}

	configDir := filepath.Join(homeDir, ".config", "den")
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("could not create config directory: %v", err)
	}

	return nil
}

func detectSystemPreferences() UserPreferences {
	prefs := UserPreferences{
		ShowGitStatus:    true,
		ShowHiddenFiles:  false,
		Theme:            "default",
		ProjectListTitle: "Projects",
	}

	// Detect default editor based on OS
	switch runtime.GOOS {
	case "darwin":
		prefs.DefaultEditor = "code" // VS Code is common on macOS
	case "linux":
		prefs.DefaultEditor = "vim" // Vim is usually available on Linux
	case "windows":
		prefs.DefaultEditor = "notepad"
	default:
		prefs.DefaultEditor = "vim"
	}

	// Detect default file manager
	switch runtime.GOOS {
	case "darwin":
		prefs.DefaultFileManager = "open"
	case "linux":
		prefs.DefaultFileManager = "xdg-open"
	case "windows":
		prefs.DefaultFileManager = "explorer"
	default:
		prefs.DefaultFileManager = "open"
	}

	return prefs
}

func LoadConfig() (*Config, error) {
	if err := ensureConfigDir(); err != nil {
		return nil, err
	}

	homeDir, err := os.UserHomeDir()
	if err != nil {
		return nil, fmt.Errorf("could not get home directory: %v", err)
	}

	configPath := filepath.Join(homeDir, ".config", "den", "config.toml")
	data, err := os.ReadFile(configPath)
	if err != nil {
		if os.IsNotExist(err) {
			// Create default config if file doesn't exist
			return DefaultConfig(), nil
		}
		return nil, fmt.Errorf("could not read config file: %v", err)
	}

	var cfg Config
	if err := toml.Unmarshal(data, &cfg); err != nil {
		return nil, fmt.Errorf("could not parse config file: %v", err)
	}

	// Merge with defaults to ensure all fields are set
	defaultCfg := DefaultConfig()

	// Only override non-empty values from the loaded config
	if cfg.Preferences.DefaultEditor == "" {
		cfg.Preferences.DefaultEditor = defaultCfg.Preferences.DefaultEditor
	}
	if cfg.Preferences.DefaultFileManager == "" {
		cfg.Preferences.DefaultFileManager = defaultCfg.Preferences.DefaultFileManager
	}
	if cfg.Preferences.Theme == "" {
		cfg.Preferences.Theme = defaultCfg.Preferences.Theme
	}
	if cfg.Preferences.ProjectListTitle == "" {
		cfg.Preferences.ProjectListTitle = defaultCfg.Preferences.ProjectListTitle
	}
	if len(cfg.Preferences.EditorList) == 0 {
		cfg.Preferences.EditorList = defaultCfg.Preferences.EditorList
	}

	return &cfg, nil
}

func SaveConfig(cfg *Config) error {
	if err := ensureConfigDir(); err != nil {
		return err
	}

	homeDir, err := os.UserHomeDir()
	if err != nil {
		return fmt.Errorf("could not get home directory: %v", err)
	}

	configPath := filepath.Join(homeDir, ".config", "den", "config.toml")

	// Create the configuration content with comments
	content := `# Den Configuration File
# This file is automatically generated but can be manually edited

# List of directories to scan for Git repositories
# Example: projectDirs = ["/home/user/code", "/home/user/work"]
projectDirs = %s

[preferences]
# Default editor to use when opening repositories
# Common options: "code" (VS Code), "vim", "nano", "emacs", "sublime"
defaultEditor = %q

# List of available editors to choose from in the UI
# Add or remove editors based on what you have installed
editorList = %s

# Default file manager/explorer to use
# Common options:
# - macOS: "open", "finder"
# - Linux: "xdg-open", "nautilus", "dolphin"
# - Windows: "explorer"
defaultFileManager = %q

# Whether to show hidden files in repository listings
showHiddenFiles = %v

# Whether to show Git status in repository listings
showGitStatus = %v

# UI theme to use
# Available options: "default", "dark", "light"
theme = %q

# Title shown at the top of the project list
projectListTitle = %q
`
	// Format the content with the current configuration values
	projectDirsStr := formatTOMLStringArray(cfg.ProjectDirs)
	editorListStr := formatTOMLStringArray(cfg.Preferences.EditorList)

	content = fmt.Sprintf(content,
		projectDirsStr,
		cfg.Preferences.DefaultEditor,
		editorListStr,
		cfg.Preferences.DefaultFileManager,
		cfg.Preferences.ShowHiddenFiles,
		cfg.Preferences.ShowGitStatus,
		cfg.Preferences.Theme,
		cfg.Preferences.ProjectListTitle,
	)

	if err := os.WriteFile(configPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("could not write config file: %v", err)
	}

	return nil
}

// formatTOMLStringArray formats a string slice as a TOML array
func formatTOMLStringArray(arr []string) string {
	if len(arr) == 0 {
		return "[]"
	}

	items := make([]string, len(arr))
	for i, s := range arr {
		items[i] = fmt.Sprintf("%q", s)
	}
	return fmt.Sprintf("[%s]", strings.Join(items, ", "))
}

func GetConfigPath() (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "", fmt.Errorf("could not get home directory: %v", err)
	}

	return filepath.Join(homeDir, ".config", "den", "config.toml"), nil
}
